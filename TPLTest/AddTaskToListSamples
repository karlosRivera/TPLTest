1 Task sample
---------------
private async void button1_Click(object sender, EventArgs e)
{
IProgress<string> progress = new Progress<string>(str =>
{
textBox1.Text += str+System.Environment.NewLine;
});

await Run(progress);
}

public async Task GetData(int i, IProgress<string> progress)
{
progress.Report("Task created "+i.ToString());
await Task.Delay(new Random().Next(1000, 10000));
progress.Report("Task completed "+i.ToString());
}

private async Task Run(IProgress<string> progress)
{
List<Task> tasks = new List<Task>();
for (int i = 0; i < 5; i++)
{
tasks.Add(GetData(i + 1, progress));
}

await Task.WhenAll(tasks);
}

2 Task sample
---------------
using System;
 using System.Collections.Generic;
 using System.Net.NetworkInformation;
 using System.Threading;
 using System.Threading.Tasks;
   
 public class Example
 {
    public static void Main()
    {
       int failed = 0;
       var tasks = new List<Task>();
       String[] urls = { "www.adatum.com", "www.cohovineyard.com",
                         "www.cohowinery.com", "www.northwindtraders.com",
                         "www.contoso.com" };
         
       foreach (var value in urls) {
          var url = value;
          tasks.Add(Task.Run( () => { var png = new Ping();
                                      try {
                                         var reply = png.Send(url);
                                         if (! (reply.Status == IPStatus.Success)) {
                                            Interlocked.Increment(ref failed);
                                            throw new TimeoutException("Unable to reach " + url + ".");
                                         }
                                      }
                                      catch (PingException) {
                                         Interlocked.Increment(ref failed);
                                         throw;
                                      }
                                    }));
       }
       Task t = Task.WhenAll(tasks);
       try {
          t.Wait();
       }
       catch {}  
   
       if (t.Status == TaskStatus.RanToCompletion)
          Console.WriteLine("All ping attempts succeeded.");
       else if (t.Status == TaskStatus.Faulted)
          Console.WriteLine("{0} ping attempts failed", failed);      
    }
 }
 // The example displays output like the following:
 //       5 ping attempts failed
 
 3 Task sample
---------------
Action action1 = ( ) => Console.WriteLine( "This is task 1" );
Action action2 = ( ) => Console.WriteLine( "This is task 2" );
Action action3 = ( ) => Console.WriteLine( "This is task 3" );

var list = new List<Action>( );

list.Add( action1 );
list.Add( action2 );
list.Add( action3 );

4 Task Sample
---------------
public async Task<int> Getdata(int i)
        {
            IProgress<string> progress = new Progress<string>(str =>
            {
                textBox1.Text = str;
            });

            await Task.Delay(300);
            progress.Report("Task completed "+i.ToString());
            //return Task.FromResult(10);
            return 10;
        }

        private async void btnTask1_Click(object sender, EventArgs e)
        {
            List<Task<int>> tasks = new List<Task<int>>();

            for (int i = 0; i < 5; i++)
            {
                tasks.Add(Getdata(i + 1));
            }

            var result = await Task.WhenAll(tasks);
        }

        private async void btnTask2_Click(object sender, EventArgs e)
        {
            var tasks = new List<Task<int>>();
            for (int ctr = 1; ctr <= 10; ctr++)
            {
                int baseValue = ctr;
                tasks.Add(Task.Factory.StartNew(b => (int)b * (int)b, baseValue));
            }

            var results = await Task.WhenAll(tasks);

            int sum = 0;
            for (int ctr = 0; ctr <= results.Length - 1; ctr++)
            {
                var result = results[ctr];
                //Console.Write($"{result} {((ctr == results.Length - 1) ? "=" : "+")} ");
                textBox1.Text += result.ToString() + ((ctr == results.Length - 1) ? "=" : "+");
                sum += result;
            }
            textBox1.Text += sum.ToString();
        }

        private void button2_Click_1(object sender, EventArgs e)
        {
            Action action1 = () => Console.WriteLine("This is task 1");
            Action action2 = () => Console.WriteLine("This is task 2");
            Action action3 = () => Console.WriteLine("This is task 3");

            var list = new List<Action>();

            list.Add(action1);
            list.Add(action2);
            list.Add(action3);

            Parallel.Invoke(list.ToArray());
        }

Parallel.Invoke( list.ToArray( ) );

*******************************************************************************************************************************************************************************

private async void button1_Click(object sender, EventArgs e)
        {
            IProgress<string> progress = new Progress<string>(str =>
            {
                textBox1.Text += str+System.Environment.NewLine;
            });

           // IProgress<string> progress = new Progress<string>(str => textBox1.Text+ = str+System.Environment.NewLine);
            await Run(progress);
        }

        public async Task GetData(int i, IProgress<string> progress)
        {
            progress.Report("Task created "+i.ToString());
            //await Task.Delay(60000 + i * 1000);
            //await Task.Delay(1000 * i);
            //await Task.Delay(new Random().Next(1000, 2000) * i);
            await Task.Delay(new Random().Next(1000, 10000));
            progress.Report("Task completed "+i.ToString());
        }

        private async Task Run(IProgress<string> progress)
        {
            List<Task> tasks = new List<Task>();
            for (int i = 0; i < 5; i++)
            {
                tasks.Add(GetData(i + 1, progress));
            }
    
            await Task.WhenAll(tasks);
        }
